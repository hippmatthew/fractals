#version 460

layout(set = 0, binding = 1, rgba8) uniform writeonly image2D ge_Canvases[];

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

const int GLOBAL_SIZE = 1023;
const float SQUARE_BOUNDS = 1.5;
const int MAX_ITERATIONS = 1000;
const float DIVERGENCE_THRESHOLD = 2.0;

vec3 hsv2rgb(vec3 c) {
  const vec4 k = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  const vec3 p = abs(fract(c.xxx + k.xyz) * 6.0 - k.www);
  return c.z * mix(k.xxx, clamp(p - k.xxx, 0.0, 1.0), c.y);
}

vec2 complex_square(vec2 z) {
  return vec2(z.x * z.x - z.y * z.y, 2 * z.x * z.y);
}

void main() {
  const ivec2 index = ivec2(gl_GlobalInvocationID.xy);
  const vec2 unit_coords = 2 * vec2(index) / GLOBAL_SIZE - vec2(1.0);
  const vec2 c = SQUARE_BOUNDS * unit_coords;
  vec2 f = c;

  int iter = 0;
  for (; iter < MAX_ITERATIONS; ++iter) {
    f = vec2(f.x * f.x - f.y * f.y, 2 * f.x * f.y) + c;
    if (length(f) > DIVERGENCE_THRESHOLD)
      break;
  }

  float t = float(iter) + 1.0 - log2(log(length(f)));
  float lambda = t / float(MAX_ITERATIONS);
  float vignette = smoothstep(1.0, 0.9, length(unit_coords));
  vec3 color = iter == MAX_ITERATIONS ? vec3(0.0) : hsv2rgb(vec3(lambda, 1.0, vignette));

  imageStore(ge_Canvases[0], index, vec4(color, 1.0));
}