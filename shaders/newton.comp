#version 460

layout(set = 0, binding = 1, rgba8) uniform writeonly image2D ge_Canvases[];

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

const int GLOBAL_SIZE = 1023;
const float SQUARE_BOUNDS = 1.5;
const int MAX_ITERATIONS = 30;
const float EPSILON = 1e-4;
const vec2[3] ROOTS = vec2[](
  vec2(1.0, 0.0),
  vec2(-0.5, 0.8660254),
  vec2(-0.5, -0.8660254)
);

vec3 hsv2rgb(vec3 c) {
  vec4 k = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  vec3 p = abs(fract(c.xxx + k.xyz) * 6.0 - k.www);
  return c.z * mix(k.xxx, clamp(p - k.xxx, 0.0, 1.0), c.y);
}

vec2 f(vec2 z) {
  // f = z^3 - 1
  return vec2(z.x * z.x * z.x - 3.0 * z.x * z.y * z.y - 1.0, 3.0 * z.x * z.x * z.y - z.y * z.y * z.y);
}

vec2 df(vec2 z) {
  // df/dz = 3z^2
  return 3.0 * vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y);
}

vec2 complex_div(vec2 n, vec2 d) {
  return vec2(n.x * d.x + n.y * d.y, n.y * d.x - n.x * d.y) / (d.x * d.x + d.y * d.y);
}

void main() {
  const ivec2 index = ivec2(gl_GlobalInvocationID.xy);
  const vec2 unit_coords = 2 * vec2(index) / GLOBAL_SIZE - vec2(1.0);
  vec2 z = SQUARE_BOUNDS * unit_coords;

  int iter = 0;
  for (; iter < MAX_ITERATIONS; ++iter) {
    vec2 dz = complex_div(f(z), df(z));
    z -= dz;
    if (dot(dz, dz) < EPSILON) break;
  }

  float hue = float(iter) / float(MAX_ITERATIONS);
  float value = (1 - float(iter) / float(MAX_ITERATIONS)) * smoothstep(1.0, 0.9, length(unit_coords));
  for (int i = 0; i < 3; ++i) {
    if (length(z - ROOTS[i]) < EPSILON) break;
    hue += 0.40;
  }

  imageStore(ge_Canvases[0], index, vec4(hsv2rgb(vec3(hue, 1.0, value)), 1.0));
}